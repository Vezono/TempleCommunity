import uuid

from config import telegram_token, lawyer_id
from telebot import types

from constants import *
from db.house import House
from db import db
from utils import Bot, MatrixIndexPlacer, MatrixIndexCounter
from view import View

bot = Bot(telegram_token)

view = View()


def root_handler(m: types.Message):
    user = db.get_user(m.from_user.id)
    if not user:
        db.create_user(m.from_user.id, m.from_user.full_name)


@bot.message_handler(func=root_handler)
def _(_):
    return


@bot.message_handler(commands=['start'])
def start_handler(m: types.Message):
    root_handler(m)

    bot.respond_to(m, "ü´°")


@bot.message_handler(commands=['found'])
def found_handler(m: types.Message):
    root_handler(m)

    if m.text.count(' ') < 1:
        bot.respond_to(m, "ü§ï–Ü —à–æ?")
        return

    if m.from_user.id != lawyer_id:
        bot.respond_to(m, "üôá‚Äç‚ôÄÔ∏è–°–æ—Ä—ñ, –ø–æ–∫–∏ —à–æ —Ç—ñ–ª—å–∫–∏ –Æ—Ä–∏—Å—Ç –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–æ–º–∞. "
                          "–ö–æ–ª–∏ –±–æ—Ç –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π, —Ç–æ —É—Å—ñ –∑–º–æ–∂—É—Ç—å.")

    name = m.text.split(" ", 1)[1]

    db.create_house(str(uuid.uuid4()), name)
    bot.respond_to(m, f"ü™ö–ó–∞—Å–Ω–æ–≤–∞–Ω–æ –¥—ñ–º \"{name}\".")


@bot.message_handler(commands=['registry'])
def registry_handler(m: types.Message):
    root_handler(m)

    kb = view.house_list_keyboard()
    bot.respond_to(m, f"üèò–Ü—Å–Ω—É—é—á—ñ –¥–æ–º–∏:", reply_markup=kb)


@bot.message_handler(commands=['ss'])
def ss_handler(m: types.Message):
    root_handler(m)

    if not m.reply_to_message:
        bot.respond_to(m, "ü§ï–Ü —à–æ?")
        return

    if m.from_user.id != lawyer_id:
        bot.respond_to(m, "üôá‚Äç‚ôÄÔ∏è–°–æ—Ä—ñ, –∞–ª–µ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –Æ—Ä–∏—Å—Ç–∞.")

    root_handler(m.reply_to_message)

    bot.respond_to(m, f"üî™–£—Å–ø—ñ—à–Ω–æ.")


@bot.message_handler(commands=['house'])
def house_handler(m: types.Message):
    root_handler(m)
    user = db.get_user(m.from_user.id)

    house = db.get_house(user.house)

    tts = view.house_info_text(house)
    bot.respond_to(m, tts, parse_mode="Markdown")


@bot.message_handler(commands=['house'])
def profile_handler(m: types.Message):
    root_handler(m)
    user = db.get_user(m.from_user.id)

    house = db.get_house(user.house)

    if not house:
        bot.respond_to(m, "üëÆ–í –≤–∞—Å –Ω–µ–º–∞ –¥–æ–º—É!")
        return

    tts = view.house_info_text(house)
    bot.respond_to(m, tts, parse_mode="Markdown")


@bot.message_handler(commands=['profile'])
def profile_handler(m: types.Message):
    root_handler(m)
    user = db.get_user(m.from_user.id)
    tts = user.profile()
    if user.status == 'goi':
        tts += (f"\n\n*–ß–æ–º—É —Ç–∏ –≥–æ–π?*\n"
                f"–¢–æ–º—É —â–æ —Ç–∏ –Ω–æ–≤–∞—á–æ–∫, —ñ –Ω–µ –ø—Ä–æ–π—à–æ–≤ \"—Å—Ç–∞–∂—É–≤–∞–Ω–Ω—è\". "
                f"–°—Ç–∞–∂—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –≤ —î–≤—Ä–µ–π—Å—å–∫–∏—Ö –¥–æ–º–∞—Ö (/registry).")
    if user.house == '':
        tts += (f"\n\n*–ß–æ–º—É —Ç–∏ –±–µ–∑—Ö–∞—Ç—å–∫–æ?*\n"
                f"–¢–æ–º—É —â–æ –Ω–µ –≤—Å—Ç—É–ø–∏–≤ –≤ –¥—ñ–º, –∞–±–æ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ —Å–≤—ñ–π!")
    bot.respond_to(m, tts, parse_mode="Markdown")


@bot.message_handler(commands=['help'])
def help_handler(m: types.Message):
    root_handler(m)

    kb, tts = view.tora()
    bot.respond_to(m, tts, reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data.startswith(MAIN_HELP_CALLBACK))
def chat_rules_callback(c: types.CallbackQuery):
    kb, tts = view.tora()
    bot.edit_message_text(tts, c.message.chat.id, c.message.id, reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data.startswith(CHAT_RULES_CALLBACK))
def chat_rules_callback(c: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="‚Ü©Ô∏è–ù–∞–∑–∞–¥ –¥–æ –¢–æ—Ä–∏", callback_data=MAIN_HELP_CALLBACK))

    tts = "–í–µ—Ä—Ö–æ–≤–Ω–∞ –ñ—Ä–∏—Ü—è —Ç—Ä–∏–º–∞—î –ø—Ä–∞–≤–∏–ª–∞ <a href='https://t.me/c/1958799638/106716'>–æ—Å—å —Ç—É—Ç</a>. –ü–æ—á–∏—Ç–∞–π—Ç–µ."
    bot.edit_message_text(tts, c.message.chat.id, c.message.id, parse_mode="HTML", reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data.startswith(ROLE_HELP_CALLBACK))
def chat_rules_callback(c: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="‚Ü©Ô∏è–ù–∞–∑–∞–¥ –¥–æ –¢–æ—Ä–∏", callback_data=MAIN_HELP_CALLBACK))

    tts = ("üèÖ–£ –¥–µ—è–∫–∏—Ö –æ–ª–¥—Ñ–∞–≥—ñ–≤ –•—Ä–∞–º—É —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ —Ä–æ–ª—ñ. –¶–µ *–î–µ–≤'—è—Ç–∫–∞*.\n\n"
           
           "*üë∏üèª–í–µ—Ä—Ö–æ–≤–Ω–∞ –ñ—Ä–∏—Ü—è:*\n"
           "@ArnaMorno. –í–ª–∞—Å–Ω–∏–∫ –°–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —ñ –≥–æ–ª–æ–≤–∞ –•—Ä–∞–º—É.\n\n"
           
           "*üë©üèª‚Äç‚öñÔ∏è–°—É–¥–¥—è:*\n"
           "@douxretrouvailles. –ú–∞—î –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ –ø—ñ–¥ —á–∞—Å –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤.\n\n"

           "*üë®üèª‚Äçüíª–Æ—Ä–∏—Å—Ç:*\n"
           "@gbball. –ó–∞–π–º–∞—î—Ç—å—Å—è –±—é—Ä–æ–∫—Ä–∞—Ç—ñ—î—é —Ç–∞ —é—Ä–∏–¥–∏—á–Ω–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –•—Ä–∞–º—É. –°–ª—ñ–¥–∫—É—î –∑–∞ –¥–æ—Ç—Ä–∏–º—É–≤–∞–Ω–Ω—è–º –¢–æ—Ä–∏.\n\n"

           "*üëÆüèª‚Äç‚ôÇ–Ü–Ω–∫–≤—ñ–∑–∏—Ç–æ—Ä:*\n"
           "@danylosobko. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Ä—ñ–∑–Ω—é –Ω–µ–≤—ñ—Ä–Ω–∏—Ö –≥–æ—ó–≤. –ú–∞—î –ó–æ—à–∏—Ç –°–º–µ—Ä—Ç—ñ.\n\n"

           "*ü§µüèª–ï–∫–æ–Ω–æ–º—ñ—Å—Ç:*\n"
           "@Kozoobminnik. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –µ–∫–æ–Ω–æ–º—ñ–∫—É, —Ü—ñ–Ω–∏, –∑–∞—Ä–ø–ª–∞—Ç–∏ —Ç–∞ –≤–∞—à—ñ –≥–∞–º–∞–Ω—Ü—ñ. –®—Ç—Ä–∞—Ñ–∏ –Ω–∞–∑–Ω–∞—á–∞—î –≤—ñ–Ω.\n\n"

           "*üë©üèª‚Äçüé®–í—ñ–π—Å—å–∫–æ–≤–∏–π:*\n"
           "@venionim. –ì–æ–ª–æ–≤—É—î –∞—Ä–º—ñ—î—é. –†–µ–≤–æ–ª—é—Ü—ñ–æ–Ω–µ—Ä. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤—ñ–π—Å—å–∫–æ–≤—ñ –¥—ñ—ó —Ç–∞ —Ç—Ä–∏–º–∞—î –∞–∫—Ç–∏–≤ –≤ –•—Ä–∞–º—ñ "
           "–∑–∞–ª—ñ–∑–Ω–æ—é —Ä—É–∫–æ—é.\n\n"

           "*üïµüèª–ü—Ä–æ—Ç–∞–≥–æ–Ω—ñ—Å—Ç:*\n"
           "@Square345. –ó–Ω–∞—î —â–æ –¥–æ —á–æ–≥–æ. –¢—Ä–∏–º–∞—î –Ω–µ–≤—ñ—Ä–Ω–∏—Ö –≥–æ—ó–≤ –ø–æ–¥–∞–ª—ñ.\n\n"
           
           "*üë©üèª‚Äç‚úà–í–∞—Ä—Ç–∞:*\n"
           "@temple\\_guardiArn\\_bot. –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –∑–∞—Ö–∏—Å—Ç –≤–∞—à–æ—ó –±–µ–∑–ø–µ–∫–∏, –≥–∞–º–∞–Ω—Ü—è —Ç–∞ –ø—Å–∏—Ö—ñ–∫–∏.\n\n"

           "*üëÅ–í—Å–µ–≤–∏–¥—è—á–µ –æ–∫–æ:*\n"
           "@purgatoriowanderer. –í—ñ–Ω –±–∞—á–∏—Ç—å –≤—Å–µ. –Ø–∫—â–æ —â–æ—Å—å —Å—Ç–∞–ª–æ—Å—å –≤ –•—Ä–∞–º—ñ - –≤—ñ–Ω –∑–Ω–∞—Ç–∏–º–µ.\n\n"
            )

    bot.edit_message_text(tts, c.message.chat.id, c.message.id, parse_mode="Markdown", reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data.startswith(HOUSE_HELP_CALLBACK))
def chat_rules_callback(c: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="‚Ü©Ô∏è–ù–∞–∑–∞–¥ –¥–æ –¢–æ—Ä–∏", callback_data=MAIN_HELP_CALLBACK))

    tts = ("üè°–î–æ–º–∏ - —Ü–µ —Ç–∞–∫—ñ –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∂–∏–¥—ñ–≤ —Ç–∞ –≥–æ—ó–≤ —É –º—ñ–Ω—ñ-—Ñ—Ä–∞–∫—Ü—ñ—ó, –∞–±–æ –≥—Ä—É–ø–∫–∏. –î—ñ–º –º–æ–∂–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—É–¥—å-—Ö—Ç–æ. "
           "–°—Ç–∞—Ç–∏ —á–ª–µ–Ω–æ–º –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑ –ø–æ–≤–Ω–æ—ó –∑–≥–æ–¥–∏ –≤—Å—Ç—É–ø–∞—é—á–æ–≥–æ —Ç–∞ –ø–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É –≥–æ–ª—ñ–≤ –¥–æ–º—É. "
           "–ó–∞ –¥–æ—Ç—Ä–∏–º—É–≤–∞–Ω–Ω—è–º –∑–≥–æ–¥–∏ —Å–ª—ñ–¥–∫—É—î –Æ—Ä–∏—Å—Ç.\n\n"
           "–ù–æ–≤–∏—Ö –≥–æ–ª—ñ–≤ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º –ø–æ—Ç–æ—á–Ω–∏—Ö –≥–æ–ª—ñ–≤ –¥–æ–º—É. –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –ø—ñ–¥ —á–∞—Å –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –≥–æ–ª—ñ–≤ –¥–æ–ø–æ–º–∞–≥–∞—î "
           "–≤–∏—Ä—ñ—à—É–≤–∞—Ç—Ç–∏ –°—É–¥–¥—è –∞–±–æ –í–µ—Ä—Ö–æ–≤–Ω–∞ –ñ—Ä–∏—Ü—è.")

    bot.edit_message_text(tts, c.message.chat.id, c.message.id, parse_mode="Markdown", reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data.startswith(HOUSE_INFO_CALLBACK))
def house_info_callback(c: types.CallbackQuery):
    house_id = c.data.split('?', 1)[1]

    house = db.get_house(house_id)
    if not house:
        kb = view.house_list_keyboard()
        bot.edit_message_text("ü§ï–î—ñ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–º–∏ –Ω–∞–¥–∞–Ω–æ –Ω–∏–∂—á–µ.", c.message.chat.id, c.message.id,
                              reply_markup=kb)

    tts = view.house_info_text(house)

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="‚Ü©Ô∏è–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–º—ñ–≤", callback_data=HOUSE_LIST_CALLBACK))

    bot.edit_message_text(tts, c.message.chat.id, c.message.id, parse_mode="Markdown", reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data.startswith(HOUSE_LIST_CALLBACK))
def house_list_callback(c: types.CallbackQuery):
    buttons = list()
    kb = types.InlineKeyboardMarkup()

    for house in House.objects():
        buttons.append(types.InlineKeyboardButton(text=house.name, callback_data=f"{HOUSE_INFO_CALLBACK}?{house.id}"))

    mip = MatrixIndexPlacer(2)
    matrix = mip.place(buttons)

    for row in matrix:
        kb.add(*row)

    bot.edit_message_text(f"üèò–Ü—Å–Ω—É—é—á—ñ –¥–æ–º–∏:", c.message.chat.id, c.message.id, reply_markup=kb)


print("–•—Ä–∞–º–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –£—Å–ø—ñ—à–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä—ñ–≤–∞–Ω–Ω—è.")
bot.polling()
